package geo_test

import (
	"fmt"
	"hackatons2/backend/geo"
	"testing"
)


func TestClustering(t *testing.T) {
	points := [][2]float64{
		{37.78180767601698, -122.41823254935669},
		{37.774501770735235, -122.41187282652157},
		{37.78182811295734, -122.41275346785454},
		{37.78073993175629, -122.41772530117969},
		{37.77824049630378, -122.42317819869399},
		{34.050318640748024, -118.23692130727024},
		{34.05652577529351, -118.2354618986374},
		{34.04934423134757, -118.23504862904366},
		{34.044759447633545, -118.24113499593875},
		{34.05400657270748, -118.24167147632792},
		{-6.295548501388787, 106.78365168290965},
		{-6.295271235882194, 106.78564725005617},
		{-6.293181059551982, 106.7839735548807},
		{-6.261666235571093, 106.81295435844231},
		{-6.261142159652035, 106.81394288132525},
		{-6.2636314991602955, 106.81104321503415},
	}
	result := geo.Dbscan(points, 1000)

	if len(result) != 4 {
		t.Errorf("Dbscan fail to create 2 cluster expected : 2, result : %d", len(result))
	}

	for i := range(result) {
		fmt.Println(result[i])
	}
}

func TestFindMiddlePoint(t *testing.T) {
	points := [][2]float64{
		{-6.294844667531178, 106.78380188920285},
		{-6.293351688215008, 106.78541121523564},
		{-6.294738028299098, 106.78541121533497},
	}
	
	latitude, longitude := geo.GetCoordinateMiddlePoint(points)

	fmt.Println(latitude, longitude)
}
